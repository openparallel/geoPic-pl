% layout 'default';
% title 'GeoPic me';
<div id="main" role="main">
    <h1>Accelerating 'embarassingly parallel' problems with <tt>threads::tbb</tt></h1>

    <p>This page is set up to show an example program which is sped up
      using Intel Threading Building blocks.  The demo shows a real
      Perl program, which is taking a series of oversized images,
      editing and combining them into a single image.  This is called
      an <em>embarassingly parallel</em> task, because it is clear
      that the work can be broken up into many parts which have no
      influence on each other.

    <p>When the page loads, it sends your approximate location to the
      application server (a simple handler written
      using <a href="http://search.cpan.org/dist/Mojolicious-Lite"><tt>Mojolicious::Lite</tt></a>),
      and then via the Flickr API a set of images are selected for
      display.  The images are first displayed in a simple table and
      resized to 160 pixels on their longest side.

    <p>The first time you click either Montage (single) or Montage
      (TBB), the server itself fetches and saves server side 500 pixel
      image versions of the images you see the thumbnails of below.

      Once it has the images on disk,
      using <a href="http://search.cpan.org/dist/Image-Magick"><tt>Image::Magick</tt></a>
      it crops each image to be square and then performs a high
      quality resize using a High Quality Gaussian filter to be 160
      pixels square.

      Finally, the resultant images are combined into a single image,
      and saved.  Timing information, which was measured on the
      server, is returned via JSON along with a URL to load the actual
      image.  Client-side Javascript updates a run log and statistics
      table below the montage.  Time spent fetching images from Flickr
      or accessing the Flickr API is timed separately and does not
      affect the computed averages.

    <p>To run the test, simply press each button a few times each, and
      check that you see a different image every time, and watch the
      results table fill up with timing data.

    <hr />
    <div class="grid_2" style="text-align: center">
        <b>Location: </b><br/>
        <span id="map">searching for your location ...</span>
    </div>
    <div class="grid_1" style="text-align: right">
        <b>Run Test:</b>
    </div>
    <div class="grid_8">
        <div id="actions" style="display: none">
	  <button onclick="get_scaled()">Montage (single)</button>
	    - server-side HQ centered crop, single-threaded scale-down & montage
	  <br/>
	  <button onclick="get_scaled_tbb()">Montage (TBB)</button>
	    - server-side HQ centered crop, parallel scale-down & montage
	  <br/>
	</div>
    </div>
    <div class="clear"></div>
    <div class="grid_12" style="padding: 1em">
        <div id="images">
	</div>
    </div>
    <div class="clear"></div>
    <div class="grid_6">
	<table id="times" style="display: none;" border="1">
	  <tr>
	    <th>Run</th><th>/button</th><th>/fetch time</th><th>/scale time</th><th>/composite time</th>
	  </tr>
	  <tbody id="timesdata"/>
	</table>
    </div>
    <div class="grid_6">
	<table id="stats" style="display: none; text-align: center" border="1">
	  <tr>
	    <th>which</th><th>/avg scale time</th><th>/n</th>
	  </tr>
	  <tr>
	    <td>single</th><th id="singleavg">-</th><th id="singlen">0</th>
	  </tr>
	  <tr>
	    <td>TBB</th><th id="tbbavg">-</th><th id="tbbn">0</th>
	  </tr>
	</table>
    </div>
    <div class="clear"></div>
    <hr />
    <div role="note">
      Notes:
      <ul>
	<li>timings may be skewed by concurrent use of hosting
	  platform or hosting platform bugs - see full about page for
	  more.
	<li>ImageMagick was compiled without alternate multi-core
	  systems such as OpenMP, OpenCL etc.
	<li>More details on the 'about' page.
      </ul>
    </div>
</div>

<script type="text/javascript">

function get_location() {
    if (Modernizr.geolocation) {
        navigator.geolocation.getCurrentPosition(show_map);
    } else {
        alert("Could not get geo API");
    }
} 
var latitude;
var longitude;
var singlestats;
var tbbstats;
var runs = 0;
function show_map(position) {
    latitude = Math.round(position.coords.latitude * 100)/100;
    longitude = Math.round(position.coords.longitude * 100)/100;

    $('#map').replaceWith('Lat: ' + latitude + '<br />Lon: ' + longitude + '<br />');
    $.ajax({
      'url': '/perl/find/' + latitude + '/' + longitude,
      'dataType': 'json',
      'success': function(data) {
        $('#images').empty();
	images = document.getElementById("images");
        table = document.createElement('table');
        table.setAttribute("style", "border: 1px solid green; text-align: center; vertial-align: middle; padding: 0; margin: 0");
        for (y=0; y<4; y++) {
	  tr = document.createElement('tr');
	  tr.setAttribute("height", "160");
          table.appendChild(tr);
	  for (x=0; x<5; x++) {
            td = document.createElement('td');
            td.setAttribute("width", "160");
	    if (url = data[ y * 5 + x ]) {
	      img = document.createElement("img");
	      img.setAttribute("src", url);
	      td.appendChild(img);
            }
            else {
	      tn = document.createTextNode("&nbsp;");
              td.appendChild(tn);
            }
            tr.appendChild(td);
          }
        }
        images.appendChild(table);
        $('#actions').show();
	window.setTimeout(function(){resize_imgs()}, 1000);
      }
    });
}

$(document).ready(function() { 
    get_location();
    singlestats = { "total": 0, "n": 0, "avg_id": "singleavg", "n_id": "singlen" };
    tbbstats = { "total": 0, "n": 0, "avg_id": "tbbavg", "n_id": "tbbn" };
});

function resize_imgs() {
    images = $("#images").find("img").each(function(idx, node) {
	if ( node.height > node.width ) {
	    $(node).css("height", "160px");
        }
	else {
	    $(node).css("width", "160px");
	}
    });
}

function get_scaled() {
    $.ajax({
      'url': '/perl/montage/single/' + latitude + '/' + longitude + '/' + runs,
      'dataType': 'json',
      'success': function(data) {
         $("#images").empty();
	 images = document.getElementById("images");
         scaled = document.createElement("img");
         scaled.setAttribute("src", data.image_url);
         images.appendChild(scaled);
	 add_timing_datum( "single", singlestats, data );
      }
    })
}

function get_scaled_tbb() {
    $.ajax({
      'url': '/perl/montage/tbb/' + latitude + '/' + longitude + '/' + runs,
      'dataType': 'json',
      'success': function(data) {
         $("#images").empty();
	 images = document.getElementById("images");
         scaled = document.createElement("img");
         scaled.setAttribute("src", data.image_url);
         images.appendChild(scaled);
	 add_timing_datum( "tbb", tbbstats, data );
      }
    })
}

function add_timing_datum( which, stats, data ) {
    runs = runs + 1;
    times_table = document.getElementById("timesdata");

    tr = document.createElement("tr");
    tr.setAttribute("class", which);

    td = document.createElement("td");
    txt = document.createTextNode(""+runs);
    td.appendChild(txt);
    tr.appendChild(td);

    td = document.createElement("td");
    txt = document.createTextNode(""+which);
    td.appendChild(txt);
    tr.appendChild(td);

    td = document.createElement("td");
    txt = document.createTextNode(""+data["fetch_time"]);
    td.appendChild(txt);
    tr.appendChild(td);

    td = document.createElement("td");
    txt = document.createTextNode(""+data["resize_time"]);
    td.appendChild(txt);
    tr.appendChild(td);

    td = document.createElement("td");
    txt = document.createTextNode(""+data["composite_time"]);
    td.appendChild(txt);
    tr.appendChild(td);

    times_table.appendChild(tr);
    $("#times").show();
    $("#times").css("text-align", "center");
    $("#times").css("border-width", "1px");
    $("#times").css("border-spacing", "2px");
    $("#times").css("border-color", "gray");

    stats["total"] = stats["total"] + parseFloat(data["resize_time"]);
    stats["n"] = stats["n"] + 1;
    update_averages(stats);
}

function update_averages(stats) {
    if (stats["n"] > 1) {
        new_avg = (Math.round( stats["total"] * 1000 / stats["n"]) / 1000) + "s";
        document.getElementById(stats["avg_id"]).firstChild.replaceWholeText( new_avg );
        document.getElementById(stats["n_id"]).firstChild.replaceWholeText( stats["n"] );
        $("#stats").show();
    }
}

</script>

