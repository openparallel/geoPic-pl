#!/usr/bin/env perl

use Mojolicious::Lite;
use FindBin qw($Bin);
use lib "$Bin/lib";
use Flickr::API2::Cached;
use Data::Dumper;

# flickr key: 76904a42e0e0a2b7eeaf037c8ec2e00b
# flickr secret: b4d1a53c3463051a
my $flickr = Flickr::API2::Cached->new(
    {'key' => '76904a42e0e0a2b7eeaf037c8ec2e00b',
     'secret' => 'b4d1a53c3463051a'},
    ( -d "./geopics" ? ("./geopics") : ())
);

get '/' => sub {
    my $self = shift;
    $self->render('index');
};

get '/perl/about' => sub {
    my $self = shift;
    $self->render('about');
};

get '/perl/contact' => sub {
    my $self = shift;
    $self->render('contact');
};

get '/perl/' => sub {
    my $self = shift;
    $self->render('index');
};

sub get_image_list {
    my ($lat, $lon, $size) = @_;
    my $images = $flickr->cached_method(
	sprintf("@%.2f+%.2f", $lat, $lon),  #cache to nearest mile or so
	'flickr.photos.search', {
	    lat => $lat,
	    lon => $lon,
	    min_taken_date => time - 2 * 86400 * 365,
	    accuracy => 3,
	    has_geo => 1,
	}
    );

    my @photos = @{$images->{photos}{photo}};
    if ( @photos > 20 ) {
	# get one each per user first
	my @got;
	while ( @got < 20 ) {
	    my %seen;
	    for my $photo ( @photos ) {
		next if !defined $photo;
		next if $seen{$photo->{owner}}++;
		push @got, $photo;
		undef($photo);
		last if @got == 20;
	    }
	}
	@photos = @got;
    }

    print STDERR Dumper(\@photos);

    my $res;
    my @urls = map { $flickr->get_url_from_image( $_, $size ) }
	(@photos);

    print STDERR "Returning: @urls\n";
    return @urls;
}

get '/perl/find/(*lat)/(*lon)' => sub {
    my $self = shift;
    my $lat  = $self->stash('lat');
    my $lon  = $self->stash('lon');

    $self->render_json(
	[ get_image_list($lat, $lon, "t") ]
    );
};

app->start;
